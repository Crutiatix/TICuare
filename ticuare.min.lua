-- title:	TICuare
-- author:	Crutiatix
-- desc:	UI library for TIC-80 v0.5.0
-- script:	lua
-- input:	mouse

-- Based on Uare (c) 2015 Ulysse Ramage
-- Copyright (c) 2017 Crutiatix
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

ticuare={name="ticuare",elements={},z=1,hz=nil} ticuare.__index=ticuare ticuare.mouse_events={nothing=0,click=1,noclick=2,none=3} local e={__index=ticuare} local function l(n,e,t,o,d,r) return n>t and n<d and e>o and e<r end local function b(n,r,t) for e,o in pairs(r)do if type(o)=="table"then if type(n[e]or false)=="table"then b(n[e]or{},r[e]or{},t) else if not n[e]or t then n[e]=o end end else if not n[e]or t then n[e]=o end end end return n end local function g(r) local t={} local function n(e) if type(e)~="table"then return e elseif t[e]then return t[e] end local o={} t[e]=o for t,e in pairs(e)do o[n(t)]=n(e) end return setmetatable(o,getmetatable(e)) end return n(r) end function ticuare.mlPrint(d,r,a,c,t,i,l,u,s) local n,o,e=0,0,0 for d in d:gmatch("([^\n]+)")do e=e+1 if l then n=font(d,r,a+((e-1)*t),u,s) else n=print(d,r,a+((e-1)*t),c,i) end if n>o then o=n end end return n,e*t end function ticuare.element(t,n) if not n then n=t t="element"end local e=n setmetatable(e,ticuare) e.hover,e.click=false,false e.active=n.active or true e.drag=n.drag or{enabled=false} e.visible=n.visible or true if e.content then if not e.content.scroll then e.content.scroll={x=0,y=0}end e.content.w,e.content.h=e.content.w or e.w,e.content.h or e.h end e.type,e.z=t,ticuare.z ticuare.z=ticuare.z+1 ticuare.hz=ticuare.z table.insert(ticuare.elements,e) return e end function ticuare.newElement(e)return ticuare.element("element",e)end function ticuare.newStyle(e)return e end function ticuare.newGroup()local e={type="group",elements={}}setmetatable(e,ticuare)return e end function ticuare:updateSelf(r,o,s,t) local c,a,n,d,i local e=ticuare.mouse_events c=t~=e.none and s or false a=l(r,o,self.x,self.y,self.x+self.w,self.y+self.h) if self.center then a=l(r,o,self.x-self.w*.5,self.y-self.h*.5,self.x+self.w*.5,self.y+self.h*.5) end n=t~=e.none and a or false d,i=self.hover,self.hold self.hover=n or(self.drag.enabled and ticuare.draging_obj and ticuare.draging_obj.obj==self) self.hold=((t==e.click and n)and true)or (c and self.hold)or((n and t~=e.noclick and self.hold)) if t==e.click and n and self.onClick then self.onClick() elseif(t==e.noclick and n and i)and self.onCleanRelease then self.onCleanRelease() elseif((t==e.noclick and n and i)or(self.hold and not n))and self.onRelease then self.onRelease() elseif self.hold and self.onHold then self.onHold() elseif not d and self.hover and self.onStartHover then self.onStartHover() elseif self.hover and self.onHover then self.onHover() elseif d and not self.hover and self.onReleaseHover then self.onReleaseHover() end if self.hold and(not n or self.drag.enabled)and not ticuare.draging_obj then self.hold=self.drag.enabled ticuare.draging_obj={obj=self,d={x=self.x-r,y=self.y-o}} elseif not self.hold and n and(ticuare.draging_obj and ticuare.draging_obj.obj==self)then self.hold=true ticuare.draging_obj=nil end if ticuare.draging_obj and ticuare.draging_obj.obj==self and self.drag.enabled then self.x=(not self.drag.fixed or not self.drag.fixed.x)and r+ticuare.draging_obj.d.x or self.x self.y=(not self.drag.fixed or not self.drag.fixed.y)and o+ticuare.draging_obj.d.y or self.y local e=self.drag.bounds if e then if e.x then self.x=(e.x[1]and self.x<e.x[1])and e.x[1]or self.x self.x=(e.x[2]and self.x>e.x[2])and e.x[2]or self.x end if e.y then self.y=(e.y[1]and self.y<e.y[1])and e.y[1]or self.y self.y=(e.y[2]and self.y>e.y[2])and e.y[2]or self.y end end if self.track then self:anchor(self.track.ref) end end return n end function ticuare:updateTrack() local n,e=self.drag.bounds,self.track if e then self.x,self.y=e.ref.x+e.d.x,e.ref.y+e.d.y if n and n.relative then if n.x then n.x[1]=e.ref.x+e.b.x[1]or nil n.x[2]=e.ref.x+e.b.x[2]or nil end if n.y then n.y[1]=e.ref.y+e.b.y[1]or nil n.y[2]=e.ref.y+e.b.y[2]or nil end end end end function ticuare:drawSelf() if self.visible then local x,y,s,a,i, b,d,r,g,p,c,l, h,f,u,e local o,t,e,n=self.shadow,self.border,self.text,self.icon d,r=self.x,self.y if self.center then d,r=self.x-self.w*.5,self.y-self.h*.5 end if o and o.colors then o.offset=o.offset or{x=1,y=1} y=((self.hold and o.colors[3])and o.colors[3])or((self.hover and o.colors[2])and o.colors[2])or o.colors[1]or nil if y then rect(d+o.offset.x,r+o.offset.y,self.w,self.h,y)end end if self.colors then x=((self.hold and self.colors[3])and self.colors[3])or((self.hover and self.colors[2])and self.colors[2])or self.colors[1]or nil if x then rect(d,r,self.w,self.h,x)end end if t and t.colors and t.width then s=((self.hold and t.colors[3])and t.colors[3])or((self.hover and t.colors[2])and t.colors[2])or t.colors[1]or nil if s then for e=0,t.width-1 do rectb(d+e,r+e,self.w-2*e,self.h-2*e,s) end end end if n and n.sprites and#n.sprites>0 then b=((self.hold and n.sprites[3])and n.sprites[3])or((self.hover and n.sprites[2])and n.sprites[2])or n.sprites[1] h=n.offset or{x=0,y=0} n.key=n.key or-1 n.scale=n.scale or 1 n.flip=n.flip or 0 n.rotate=n.rotate or 0 n.size=n.size or 1 for e=1,n.size do for t=1,n.size do spr(b+(e-1)+((t-1)*16), (d+(self.center and 0 or self.w*.5)+h.x-4), (r+(self.center and 0 or self.h*.5)+h.y-4), n.key, n.scale, n.flip, n.rotate) end end end if e and e.display and e.colors[1]then e.colors[1]=e.colors[1]or 14 e.space=e.space or 5 e.key=e.key or-1 e.spacing=e.spacing or(e.font and 8 or 6) e.fixed=e.fixed or false if(self.hold and e.colors[3])then i=e.colors[3] elseif(self.hover and e.colors[2])then i=e.colors[2] else i=e.colors[1] end if e.shadow then if(self.hold and e.shadow.colors[3])then a=e.colors[3] elseif(self.hover and e.shadow.colors[2])then a=e.shadow.colors[2] else a=e.shadow.colors[1] end u=e.shadow.offset or{x=1,y=1} end f=e.offset or{x=0,y=0} g,p=ticuare.mlPrint(e.display,300,300,-1,e.spacing,e.fixed,e.font,e.key,e.space) c=self.x-(self.center and(self.w*.5)or 0)+(e.center and(self.w*.5)-(g*.5)or 0)+f.x+(e.center and 0 or t.width) l=self.y-(self.center and(self.h*.5)or 0)+(e.center and(self.h*.5)-(p*.5)or 0)+f.y+(e.center and 0 or t.width) if e.shadow and a then ticuare.mlPrint(e.display,c+u.x,l+u.y,a,e.spacing,e.fixed,e.font,e.key,e.space) ticuare.mlPrint(e.display,c,l,i,e.spacing,e.fixed,e.font,e.key,e.space) else ticuare.mlPrint(e.display,c,l,i,e.spacing,e.fixed,e.font,e.key,e.space) end end if self.content and self.drawContent then if self.content.wrap and clip then clip(self.x+t.width,self.y+t.width,self.w-(2*t.width),self.h-(2*t.width))end self:renderContent() if self.content.wrap and clip then clip()end end end end function ticuare:renderContent() local t,n=self.x,self.y if self.center then t,n=self.x-self.w*.5,self.y-self.h*.5 end local e=self.border.width and self.border.width+1 or 1 local t=t-(self.content.scroll.x or 0)*(self.content.w-self.w)+e local e=n-(self.content.scroll.y or 0)*(self.content.h-self.h)+e self.drawContent(self,t,e) end function ticuare:setContent(e) self.drawContent=e end function ticuare:setContentDimensions(n,e) if self.content then self.content.w,self.content.h=n,e end end function ticuare:setScroll(e) e.x=e.x or 0 e.y=e.y or 0 if self.content then e.x=(e.x<0 and 0)or(e.x>1 and 1)or e.x e.y=(e.y<0 and 0)or(e.y>1 and 1)or e.y self.content.scroll.x,self.content.scroll.y=e.x or self.content.scroll.x,e.y or self.content.scroll.y end end function ticuare:getScroll() if self.content then return{x=self.content.scroll.x,y=self.content.scroll.y} end end function ticuare.update(d,i,o) if d and i then local n=ticuare.mouse_events local r,a,t,e=n.nothing,false,{},nil if ticuare.click and not o then ticuare.click=false r=n.noclick ticuare.draging_obj=nil elseif not ticuare.click and o then ticuare.click=true r=n.click ticuare.draging_obj=nil end for e=1,#ticuare.elements do table.insert(t,ticuare.elements[e])end table.sort(t,function(e,n)return e.z>n.z end) for c=1,#t do e=t[c] if e then if e:updateSelf(d,i,o,((a or(ticuare.draging_obj and ticuare.draging_obj.obj~=e))or not e.active)and n.none or r)then a=true end end end for e=#ticuare.elements,1,-1 do if ticuare.elements[e]then ticuare.elements[e]:updateTrack() end end end end function ticuare.draw() local e={} for n=1,#ticuare.elements do if ticuare.elements[n].draw then table.insert(e,ticuare.elements[n])end end table.sort(e,function(e,n)return e.z<n.z end) for n=1,#e do e[n]:drawSelf()end end function ticuare:style(e) if self.type=="group"then for n=1,#self.elements do b(self.elements[n],g(e),false) end else b(self,g(e),false) end return self end function ticuare:anchor(n) local e,t,r,o,d=self.drag.bounds,nil,nil,nil,nil if e and e.x then t=e.x[1]-n.x r=e.x[2]-n.x elseif e and e.y then o=e.y[1]-n.y d=e.y[2]-n.y end self.track={ref=n,d={x=self.x-n.x,y=self.y-n.y},b={x={t,r},y={o,d}}} return self end function ticuare:group(e) table.insert(e.elements,self) return self end function ticuare:setActive(e) if self.type=="group"then for n=1,#self.elements do self.elements[n]:setActive(e) end else self.active=e end end function ticuare:enable()return self:setActive(true)end function ticuare:disable()return self:setActive(false)end function ticuare:getActive()if self.active~=nil then return self.active end end function ticuare:setVisible(e) if self.type=="group"then for n=1,#self.elements do self.elements[n]:setVisible(e) end else self.visible=e end end function ticuare:show(e)return self:setVisible(true,e)end function ticuare:hide(e)return self:setVisible(false,e)end function ticuare:getVisible()if self.visible~=nil then return self.visible end end function ticuare:setDragBounds(e) self.drag.bounds=e end function ticuare:setHorizontalRange(e) self.x=self.drag.bounds.x[1]+(self.drag.bounds.x[2]-self.drag.bounds.x[1])*e end function ticuare:setVerticalRange(e) self.y=self.drag.bounds.y[1]+(self.drag.bounds.y[2]-self.drag.bounds.y[1])*e end function ticuare:getHorizontalRange() assert(self.drag.bounds and self.drag.bounds.x and self.drag.bounds.x and self.drag.bounds.x[1]and self.drag.bounds.x[2],"Element must have 2 horizontal boundaries") return(self.x-self.drag.bounds.x[1])/(self.drag.bounds.x[2]-self.drag.bounds.x[1]) end function ticuare:getVerticalRange() assert(self.drag.bounds and self.drag.bounds.y and self.drag.bounds.y and self.drag.bounds.y[1]and self.drag.bounds.y[2],"Element must have 2 vertical boundaries") return(self.y-self.drag.bounds.y[1])/(self.drag.bounds.y[2]-self.drag.bounds.y[1]) end function ticuare:setIndex(n) if self.type=="group"then local e for n=1,#self.elements do if not e or self.elements[n].z<e then e=self.elements[n].z end end for t=1,#self.elements do local e=self.elements[t].z-e+n self.elements[t]:setIndex(e) end else self.z=n if n>ticuare.hz then ticuare.hz=n end end end function ticuare:toFront() if self.z<ticuare.hz or self.type=="group"then return self:setIndex(ticuare.hz+1)end end function ticuare:getIndex()return self.z end function ticuare:remove() for e=#ticuare.elements,1,-1 do if ticuare.elements[e]==self then table.remove(ticuare.elements,e)self=nil end end end function ticuare.clear() for e=1,#ticuare.elements do ticuare.elements[e]=nil end end
