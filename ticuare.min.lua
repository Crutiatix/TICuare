-- title:	TICuare
-- author:	Crutiatix
-- desc:	UI library for TIC-80 v0.8.0
-- script:	lua
-- input:	mouse

-- Copyright (c) 2017 Crutiatix
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

ticuare={name="ticuare",elements={},z=1,hz=nil}ticuare.__index=ticuare ticuare.me={nothing=0,click=1,noclick=2,none=3}local e={__index=ticuare}local function u(r,e,n,t,o,i)return r>n and r<n+o and e>t and e<t+i end local function R(e,o,t)for n,r in pairs(o)do if type(r)=="table"then if type(e[n]or false)=="table"then R(e[n]or{},o[n]or{},t)else if not e[n]or t then e[n]=r end end else if not e[n]or t then e[n]=r end end end return e end local function i(e,n)if(e==nil and n==nil)then for e=0,15 do poke4(16368*2+e,e)end else poke4(16368*2+e,n)end end function ticuare.lerp(e,n,t)if e==n then return e else if math.abs(e-n)<.005 then return n else return e*(1-t)+n*t end end end local function F(o)local t={}local function r(e)if type(e)~="table"then return e elseif t[e]then return t[e]end local n={}t[e]=n for t,e in pairs(e)do n[r(t)]=r(e)end return setmetatable(n,getmetatable(e))end return r(o)end local function f(o,r,t,n,e)if o then return t elseif r then return n else return e end end function ticuare.print(t,i,a,o,n,e)n=n or false e=e or 1 local d,r=t:gsub("\n","")if o then local e,e=print(t,i,a,o,n,e),(6+r)*e*(r+1)end return width,height end function ticuare.font(c,s,f,r,e,a,n,o,t)e=e or-1 a=a or 8 n=n or 8 o=o or false t=t or 1 local d,l=c:gsub("\n","")if type(e)=="table"and type(e[1])=="table"then for t,n in ipairs(e[1])do if type(r)=="table"then i(n,r[t])else i(n,r)end end e=e[2]end local d if r then d=font(c,s,f,e,a,n,o,t)end i()return d,(n+l)*t*(1+l)end function ticuare.element(t,n)if not n then n=t t="element"end local e=n setmetatable(e,ticuare)e.hover,e.click=false,false e.activity=n.activity or true e.drag=n.drag or{activity=false}e.align=n.align or{x=0,y=0}e.visibility=n.visibility or true if e.content then if not e.content.scroll then e.content.scroll={x=0,y=0}end e.content.w,e.content.h=e.content.w or e.w,e.content.h or e.h end e.type,e.z=t,ticuare.z ticuare.z=ticuare.z+1 ticuare.hz=ticuare.z table.insert(ticuare.elements,e)return e end function ticuare.Element(e)return ticuare.element("element",e)end function ticuare.Style(e)return e end function ticuare.Group()local e={type="group",elements={}}setmetatable(e,ticuare)return e end function ticuare:updateSelf(e)if e.mouse_x and e.mouse_y and e.event then mouse_x=e.mouse_x mouse_y=e.mouse_y mouse_press=e.press mouse_event=e.event local a,d,n,t,r,e,e local e,i,o=ticuare.me,self.x-(self.align.x==1 and self.w*.5 or(self.align.x==2 and self.w or 0)),self.y-(self.align.y==1 and self.h*.5-1 or(self.align.y==2 and self.h-1 or 0))a=mouse_event~=e.none and mouse_press or false d=u(mouse_x,mouse_y,i,o,self.w,self.h)n=mouse_event~=e.none and d or false t,r=self.hover,self.hold self.hover=n or(self.drag.active and ticuare.draging_obj and ticuare.draging_obj.obj==self)self.hold=((mouse_event==e.click and n)and true)or(a and self.hold)or((n and mouse_event~=e.noclick and self.hold))if mouse_event==e.click and n and self.onClick then self.onClick(self)elseif(mouse_event==e.noclick and n and r)and self.onCleanRelease then self.onCleanRelease(self)elseif((mouse_event==e.noclick and n and r)or(self.hold and not n))and self.onRelease then self.onRelease(self)elseif self.hold and self.onPress then self.onPress(self)elseif not t and self.hover and self.onStartHover then self.onStartHover(self)elseif self.hover and self.onHover then self.onHover(self)elseif t and not self.hover and self.onReleaseHover then self.onReleaseHover(self)end if self.hold and(not n or self.drag.active)and not ticuare.draging_obj then self.hold=self.drag.active ticuare.draging_obj={obj=self,d={x=i-mouse_x,y=o-mouse_y}}elseif not self.hold and n and(ticuare.draging_obj and ticuare.draging_obj.obj==self)then self.hold=true ticuare.draging_obj=nil end if ticuare.draging_obj and ticuare.draging_obj.obj==self and self.drag.active then self.x=(not self.drag.fixed or not self.drag.fixed.x)and mouse_x+ticuare.draging_obj.d.x or self.x self.y=(not self.drag.fixed or not self.drag.fixed.y)and mouse_y+ticuare.draging_obj.d.y or self.y local e=self.drag.bounds if e then if e.x then self.x=(e.x[1]and self.x<e.x[1])and e.x[1]or self.x self.x=(e.x[2]and self.x>e.x[2])and e.x[2]or self.x end if e.y then self.y=(e.y[1]and self.y<e.y[1])and e.y[1]or self.y self.y=(e.y[2]and self.y>e.y[2])and e.y[2]or self.y end end if self.track then self:anchor(self.track.ref)end end return n elseif e.focused_element and e.event then local t,i,a,n,r,o=ticuare.me i=e.event~=t.none and e.press or false a=self==e.focused_element n=e.event~=t.none and a or false r,o=self.hover,self.hold self.hover=n self.hold=((e.event==t.click and n)and true)or(i and self.hold)or((n and e.event~=t.noclick and self.hold))if e.event==t.click and n and self.onClick then self.onClick(self)elseif(e.event==t.noclick and n and o)and self.onCleanRelease then self.onCleanRelease(self)elseif((e.event==t.noclick and n and o)or(self.hold and not n))and self.onRelease then self.onRelease(self)elseif self.hold and self.onPress then self.onPress(self)elseif not r and self.hover and self.onStartHover then self.onStartHover(self)elseif self.hover and self.onHover then self.onHover(self)elseif r and not self.hover and self.onReleaseHover then self.onReleaseHover(self)end return n else error("updateSelf error in arguments!")end end function ticuare:updateTrack()local n,e=self.drag.bounds,self.track if e then self.x,self.y=e.ref.x+e.d.x,e.ref.y+e.d.y if n and n.relative then if n.x then n.x[1]=e.ref.x+e.b.x[1]or nil n.x[2]=e.ref.x+e.b.x[2]or nil end if n.y then n.y[1]=e.ref.y+e.b.y[1]or nil n.y[2]=e.ref.y+e.b.y[2]or nil end end end end function ticuare:drawSelf()if self.visibility then local S,C,R,h,j,v,u,P,o,r,m,_,p,b,k,z,s,x,e,i,l,d,H,y,g local c,a,e,t,n,w=self.shadow,self.border,self.text,self.icon,self.tiled,self.colors o=self.x-(self.align.x==1 and self.w*.5-1 or(self.align.x==2 and self.w-1 or 0))r=self.y-(self.align.y==1 and self.h*.5-1 or(self.align.y==2 and self.h-1 or 0))if c and c.colors then c.offset=c.offset or{x=1,y=1}C=f(self.hold,self.hover,c.colors[3],c.colors[2],c.colors[1])if C then rect(o+c.offset.x,r+c.offset.y,self.w,self.h,C)end end if w then S=f(self.hold,self.hover,w[3],w[2],w[1])if S then rect(o,r,self.w,self.h,S)end end i=a and(a.width)or 0 y=2*i if n then n.scale=n.scale or 1 n.key=n.key or-1 n.flip=n.flip or 0 n.rotate=n.rotate or 0 n.w=n.w or 1 n.h=n.h or 1 H=f(self.hold,self.hover,n.sprites[3],n.sprites[2],n.sprites[1])if H then clip(o+i,r+i,self.w-y,self.h-y)for e=0,self.w+(8*n.w)*n.scale,(8*n.w)*n.scale do for t=0,self.h+(8*n.h)*n.scale,(8*n.h)*n.scale do spr(H,o+e+i,r+t+i,n.key,n.scale,n.flip,n.rotate,n.w,n.h)end end clip()end end if self.content and self.drawContent then if self.content.wrap and clip then clip(o+i,r+i,self.w-y,self.h-y)end self:renderContent()if self.content.wrap and clip then clip()end end if a and a.colors then k=a.colors R=f(self.hold,self.hover,k[3],k[2],k[1])if R then for e=0,a.width-1 do rectb(o+e,r+e,self.w-2*e,self.h-2*e,R)end end end if a and a.sprites then l=a.key or-1 d=f(self.hold,self.hover,a.sprites[3],a.sprites[2],a.sprites[1])if d then clip(o+8,r,self.w-16+1,self.h)for e=8,self.w-9,8 do spr(d[2],o+e,r,l,1,0,0)spr(d[2],o+e,r+self.h-8,l,1,0,2)end clip()spr(d[1],o,r,l,1,0,0)spr(d[1],o+self.w-8,r,l,1,0,1)clip(o,r+8,self.w,self.h-16+1)for e=8,self.h-9,8 do spr(d[2],o,r+e,l,1,0,3)spr(d[2],o+self.w-8,r+e,l,1,2,1)end clip()spr(d[1],o+self.w-8,r+self.h-8,l,1,0,2)spr(d[1],o,r+self.h-8,l,1,0,3)end end if t and t.sprites and#t.sprites>0 then P=((self.hold and t.sprites[3])and t.sprites[3])or((self.hover and t.sprites[2])and t.sprites[2])or t.sprites[1]z=t.offset or{x=0,y=0}t.align=t.align or{x=0,y=0}spr(P,(o+(t.align.x==1 and self.w*.5-((t.scale*8)/2)or(t.align.x==2 and self.w-(t.scale*8)or 0))+z.x),(r+(t.align.y==1 and self.h*.5-((t.scale*8)/2)or(t.align.y==2 and self.h-(t.scale*8)or 0))+z.y),t.key,t.scale,t.flip,t.rotate,t.w,t.h)end if e and e.print then u=e.colors or{15,15,15}u[1]=u[1]or 15 j=f(self.hold,self.hover,u[3],u[2],u[1])if e.shadow then v=e.shadow h=f(self.hold,self.hover,v.colors[3],v.colors[2],v.colors[1])x=v.offset or{x=1,y=1}end s=e.offset or{x=0,y=0}if e.font then e.space=e.space or{w=8,h=8}m,_=ticuare.font(e.print,0,200,-1,e.key,e.space.w,e.space.h,e.fixed,e.scale)else m,_=ticuare.print(e.print,0,200,-1,e.fixed,e.scale)end g=e.align or{x=0,y=0}p=(g.x==1 and o+((self.w*.5)-(m*.5))+s.x or(g.x==2 and o+((self.w)-(m))+s.x-i or o+s.x+i))b=(g.y==1 and r+((self.h*.5)-(_*.5))+s.y or(g.y==2 and r+((self.h)-(_))+s.y-i or r+s.y+i))if e.font then if type(h)=="table"then ticuare.font(e.print,p+x.x,b+x.y,h,e.key,e.space.w,e.space.h,e.fixed,e.scale)end ticuare.font(e.print,p,b,j,e.key,e.space.w,e.space.h,e.fixed,e.scale)else if h then ticuare.print(e.print,p+x.x,b+x.y,h,e.fixed,e.scale)end ticuare.print(e.print,p,b,j,e.fixed,e.scale)end end end end function ticuare:renderContent()local i,o,n,t,r,e e=self.align i=self.x-(e.x==1 and self.w*.5 or(e.x==2 and self.w or 0))o=self.y-(e.y==1 and self.h*.5-1 or(e.y==2 and self.h-1 or 0))n=self.border and self.border.width or 1 t=i-(self.content.scroll.x or 0)*(self.content.w-self.w)+n r=o-(self.content.scroll.y or 0)*(self.content.h-self.h)+n self.drawContent(self,t,r)end function ticuare:Content(e)self.drawContent=e return self end function ticuare:scroll(e)if e~=nil then e.x=e.x or 0 e.y=e.y or 0 if self.content then e.x=(e.x<0 and 0)or(e.x>1 and 1)or e.x e.y=(e.y<0 and 0)or(e.y>1 and 1)or e.y self.content.scroll.x,self.content.scroll.y=e.x or self.content.scroll.x,e.y or self.content.scroll.y end return self else if self.content then return self.content.scroll end end end function ticuare.update(e,l,o)local t,r=ticuare.me,ticuare.elements local d,i,a,n=t.nothing,false,{},nil if type(e)=="table"then o=l end if e then if ticuare.click and not o then ticuare.click=false d=t.noclick ticuare.draging_obj=nil elseif not ticuare.click and o then ticuare.click=true d=t.click ticuare.draging_obj=nil end for e=1,#r do table.insert(a,r[e])end table.sort(a,function(n,e)return n.z>e.z end)for r=1,#a do n=a[r]if n then if type(e)=="table"then if n:updateSelf{focused_element=e,press=o,event=(i or not n.activity)and t.none or d}then i=true end elseif e and l and type(e)~="table"then if n:updateSelf{mouse_x=e,mouse_y=l,press=o,event=((i or(ticuare.draging_obj and ticuare.draging_obj.obj~=n))or not n.activity)and t.none or d}then i=true end else error("Wrong arguments for update()")end end end for e=#r,1,-1 do if r[e]then r[e]:updateTrack()end end end end function ticuare.draw()local e={}for n=1,#ticuare.elements do if ticuare.elements[n].draw then table.insert(e,ticuare.elements[n])end end table.sort(e,function(n,e)return n.z<e.z end)for n=1,#e do e[n]:drawSelf()end end function ticuare:style(e)if self.type=="group"then for t,n in pairs(self.elements)do R(n,F(e),false)end else R(self,F(e),false)end return self end function ticuare:anchor(n)if self.type=="group"then for t,e in pairs(self.elements)do e:anchor(n)end else local e,t,r,o,i=self.drag.bounds,nil,nil,nil,nil if e and e.x then t=e.x[1]-n.x r=e.x[2]-n.x elseif e and e.y then o=e.y[1]-n.y i=e.y[2]-n.y end self.track={ref=n,d={x=self.x-n.x,y=self.y-n.y},b={x={t,r},y={o,i}}}end return self end function ticuare:group(n,e)if e then n.elements[e]=self else table.insert(n.elements,self)end return self end function ticuare:active(e)if e~=nil then if self.type=="group"then for t,n in pairs(self.elements)do n:active(e)end else self.activity=e end return self else if self.type=="group"then local e={}for n,t in pairs(self.elements)do e[n]=t:active()end return e else if self.activity~=nil then return self.activity end end end end function ticuare:visible(e)if e~=nil then if self.type=="group"then for t,n in pairs(self.elements)do n:visible(e)end else self.visibility=e end return self else if self.type=="group"then local e={}for n,t in pairs(self.elements)do e[n]=t:visible()end return e else if self.activity~=nil then return self.visibility end end end end function ticuare:dragBounds(e)if e~=nil then self.drag.bounds=e else return self.drag.bounds end end function ticuare:horizontalRange(n)local e=self.drag.bounds if n~=nil then self.x=e.x[1]+(e.x[2]-e.x[1])*n else assert(e and e.x and#e.x==2,"X bounds error!")return(self.x-e.x[1])/(e.x[2]-e.x[1])end end function ticuare:verticalRange(n)local e=self.drag.bounds if n~=nil then self.y=e.y[1]+(e.y[2]-e.y[1])*n else assert(e and e.y and#e.y==2,"Y bounds error!")return(self.y-e.y[1])/(e.y[2]-e.y[1])end end function ticuare:index(e)if e~=nil then if self.type=="group"then local n for t,e in pairs(self.elements)do if not n or e.z<n then n=e.z end end for r,t in pairs(self.elements)do local e=t.z-n+e t:index(e)end else self.z=e if e>ticuare.hz then ticuare.hz=e end end else return self.z end return end function ticuare:toFront()if self.z<ticuare.hz or self.type=="group"then return self:index(ticuare.hz+1)end end function ticuare:remove()for e=#ticuare.elements,1,-1 do if ticuare.elements[e]==self then table.remove(ticuare.elements,e)self=nil end end end function ticuare.empty()for e=1,#ticuare.elements do ticuare.elements[e]=nil end end